import json
import time
from threading import Timer
from random import randint
import sys
class Account:

	def __init__(self,accountNumber):
		self.accountNumber = accountNumber
		self.accountBalance = 0

	def depositMoney(self,amount):
		self.accountBalance = self.accountBalance + amount;

	def withdrawMoney(self,amount):
		self.accountBalance = self.accountBalance - amount;

	def getBalance(self):
		return self.accountBalance

class Accounts:

	def __init__(self):
		self.accountMap = {}
	
	def isAccountPresent(self,accountNumber):
		if not accountNumber in self.accountMap:
			# output('Account {} not present. Creating a new account. '.format(accountNumber))
			acc = Account(accountNumber);
			self.accountMap[accountNumber] = acc;

	def setAccountMap(self,accountMap):
		self.accountMap = accountMap

	def getAccountObject(self,accountNumber):
		self.isAccountPresent(accountNumber)
		acc = self.accountMap[accountNumber]
		return acc

	def withdrawMoney(self,accountNumber,amount):
		acc = self.getAccountObject(accountNumber)
		if(acc.getBalance() > amount):
			acc.withdrawMoney(amount)

		# output('Money {} withdrawn from account number {} '.format(amount,accountNumber))

		return acc.getBalance()

	def depositMoney(self,accountNumber,amount):
		acc = self.getAccountObject(accountNumber)
		acc.depositMoney(amount)
		balance =  acc.getBalance()
		# output('Money {} deposited - acc no {}. Balance is {} '.format(amount,accountNumber,balance))
		return balance

	def getBalance(self,accountNumber):
		acc = self.getAccountObject(accountNumber)
		return acc.getBalance()

class BankServer(process):
		
	def setup(accounts,nextServer):
		self.requestHistory = {};

	def main():
		await(False)

	#This gets invoked by the client if any getBalance request is sent. The response back to 
	#the client is send by the Tail of the server chain
	
	def receive(msg=('query',requestId,accountNumber),from_=node):
		balance = getBalance(accountNumber)
		message = ""
		if not requestId in self.requestHistory:
			self.requestHistory[requestId] = balance
			message = "Processed"
		else:
			balance = self.requestHistory[requestId]
			message = "InconsistentWithHistory"
		
		output("[Server] Processed by all the nodes. Sending the response back from Tail ({},{},{},{}) for transaction Type = getBalance".format(requestId,accountNumber,message,balance))
		send(('balance',requestId,message,balance),to=node);

	def receive(msg=('update',requestId,accountNumber,amount,updateType),from_=node):
		self.updateRequest(requestId,accountNumber,amount,node,updateType)

	def receive(msg=('update',requestId,accountNumber,amount,updateType,clientNode),from_=node):
		self.updateRequest(requestId,accountNumber,amount,clientNode,updateType)
		
	#This gets invoked by the client if any withdraw or deposit request is sent. The response back to 
	#the client is send by the Tail of the server chain

	def updateRequest(requestId,accountNumber,amount,clientNode,updateType):
		# output('Deposit request received by the server')
		balance = 0;
		message = "Processed";
		balance = self.getBalance(accountNumber)
		duplicate = False
		isInconsistent = False

		if requestId+str(accountNumber)+updateType in self.requestHistory:
			duplicate = True

		if requestId+str(accountNumber) in self.requestHistory:
			transType = self.requestHistory[requestId+str(accountNumber)]
			if transType != updateType:
				isInconsistent = True

		if (not duplicate) and (not isInconsistent):
			if updateType == "deposit":
				balance = depositMoney(accountNumber,amount)
			else: 
				if balance > amount:
					balance = withdrawMoney(accountNumber,amount)
				else:
					message = "inSufficientFund"
			self.requestHistory[requestId+str(accountNumber)+updateType] = (requestId,accountNumber,message,balance)
			self.requestHistory[requestId+str(accountNumber)] = updateType

		if duplicate:
			el = self.requestHistory[requestId+str(accountNumber)+updateType]
			balance = el[3]
			message = el[2]

		if isInconsistent:
			message = "InconsistentWithHistory"
			balance = self.getBalance(accountNumber)


		if nextServer is None:
			node = clientNode
			output("[Server] Processed by all the nodes. Sending the response back from Tail ({},{},{},{}) for transaction Type = {}".format(requestId,accountNumber,message,balance,updateType))
			send(('updateDone',requestId,accountNumber,message,balance),to=node)
		else:
			node = nextServer
			send(('update',requestId,accountNumber,amount,updateType,clientNode),to=node)	


	def withdrawMoney(accountNumber,amount):
		return accounts.withdrawMoney(accountNumber,amount)

	def depositMoney(accountNumber,amount):
		return accounts.depositMoney(accountNumber,amount)

	def getBalance(accountNumber):
		return accounts.getBalance(accountNumber)

	
class client(process):
	def setup(head,tail,operationArr,bankName):
		if not hasattr('self','bankServerMap'):
			self.bankServerMap = {}

		if bankName not in self.bankServerMap:
			self.bankServerMap[bankName] = {}
			self.bankServerMap[bankName]['head'] = head
			self.bankServerMap[bankName]['tail'] = tail

	def updateMoney(requestId,accountNumber,amount,updateType):
		node = self.bankServerMap[bankName]['head']
		send(('update',requestId,accountNumber,amount,updateType),to=node)

	#Sends query to the Tail Node to get the balance
	def getBalance(requestId,accountNumber):
		node = self.bankServerMap[bankName]['tail']
		send(('query',requestId,accountNumber),to=node)

	#This gets invoked when "Query finish" request is received from the tail of the server chain.
	def receive(msg=('balance',requestId,message,balance),from_=node):
		output('[Client] Balance Query Processed. Final response = ({},{},{}) '.format(requestId,message,balance))

	#This gets invoked when update request is received from the tail of the server chain.
	def receive(msg=('updateDone',requestId,accountNumber,message,balance),from_=node):
		output('[Client] Withdraw/Deposit Processed. Final response = ({},{},{},{}) '.format(requestId,accountNumber,message,balance))

	#This method makes transaction requests as mentioned in the JSON configuratin file.
	def main():
		randomOp = ['deposit','getBalance','withdraw']
		for el in operationArr:
			transType = el['type'] if el['type'] != 'random' else randomOp[randint(0,2)]
			accNumber = el['accountNumber'] if isinstance(el['accountNumber'],(int)) else randint(1,9)
			transId = el['request_id'] if isinstance(el['request_id'],(int)) else randint(1,9)
			
			clientId = str(self.id).split(",")[1].strip();
			requestId = bankName+"."+str(transId)+"."+clientId
			output("[Client] Sending to Server. Request Id = {} and transaction type = {}".format(requestId,transType))
			if(transType == "getBalance"):
				getBalance(requestId,accNumber)
			else:
				amount = el['amount'] if isinstance(el['amount'],(int)) else randint(1,9)
				updateMoney(requestId,accNumber,amount,transType)

		await(False)
		

def main():
	path = "project/config.json"

	#Check if there is some arguments passes. If Yes then path is read from the argument
	if len(sys.argv) > 1:
		path = sys.argv[1]

	variable = open(path)
	x = variable.read()
	sample = json.loads(x)
	serverList = [] #this will contain the list of all the server objects
	clientList = [] #this will contain the list of all the client objects
	timerList = [] #this will contain the list of all the  objects which have delayed start.

	#The key 'config' contains all the configuration for different client , server architecture
	for el in sample['config']:
		tempServerList = []
		size = int(el['length_of_chain'])
		bankName = el['bank_name']
		startUpDelay = 0


		if 'startUpDelay' in el:
			startUpDelay = el['startUpDelay']
			
		for index in range(size):
			serverVar = new(BankServer,num=1)
			tempServerList.append(serverVar)
			if startUpDelay == 0:
				serverList.append(serverVar)
			else:
				timers = Timer(startUpDelay,da.api.start,serverVar)
				timerList.append(timers)
		
		#call setup for all the server except the Tail Node. 
		for i in range(size-1):
			currentServer = tempServerList[i]
			nextServer = tempServerList[i+1]
			setup(currentServer,(Accounts(),nextServer))


		#call setup for the tail node of the server
		setup(tempServerList[size-1],(Accounts(),None))
		head = tempServerList[0]
		tail = tempServerList[size-1]

		#iterating through the configuration of all the clients. There can be multiple clients
		for clientEl in el['clients']:
			#This array contains all the transaction done by this client. This will be passedto setup() of client
			operationArr = clientEl['operation']
			customer = new(client,num=1)
			setup(customer,(head,tail,operationArr,bankName))
			if startUpDelay == 0:
				clientList.append(customer)
			else:
				timers = Timer(startUpDelay,da.api.start,customer)
				timerList.append(timers)
			

	for el in serverList:
		start(el)

	for el in clientList:
		start(el)

	for el in timerList:
		el.start()

